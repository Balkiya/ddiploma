import cv2
import numpy as np
import os
import mediapipe as mp

SAVE_DIR = "./gesture_type_data"
os.makedirs(SAVE_DIR, exist_ok=True)

mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=1)
mp_drawing = mp.solutions.drawing_utils

cap = cv2.VideoCapture(0)
print("üì∏ –ö–∞–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ (static / dynamic)
gesture_type = input("üëâ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∂–µ—Å—Ç–∞ (static / dynamic): ").strip().lower()
if gesture_type not in ["static", "dynamic"]:
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∂–µ—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ static –∏–ª–∏ dynamic.")
    exit()

# –í–≤–æ–¥ –±—É–∫–≤—ã
letter = input("üëâ –í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É (–ø—Ä–∏–º–µ—Ä: A, –ë, CH –∏ —Ç.–¥.): ").strip().upper()

# –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
save_path = os.path.join(SAVE_DIR, gesture_type, letter)
os.makedirs(save_path, exist_ok=True)

count = 0
NUM_SAMPLES = 200

print(f"ü§ö –ü–æ–∫–∞–∑—ã–≤–∞–π –∂–µ—Å—Ç –¥–ª—è '{letter}' ({gesture_type}). –°–æ—Ö—Ä–∞–Ω—è–µ–º {NUM_SAMPLES} –ø—Ä–∏–º–µ—Ä–æ–≤...")

while count < NUM_SAMPLES:
    ret, frame = cap.read()
    if not ret:
        continue

    image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(image_rgb)

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            keypoints = []
            for lm in hand_landmarks.landmark:
                keypoints.extend([lm.x, lm.y])

            keypoints = np.array(keypoints)
            np.save(os.path.join(save_path, f"{count}.npy"), keypoints)
            count += 1
            print(f"[{count}/{NUM_SAMPLES}] —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    cv2.putText(frame, f"{gesture_type.upper()} {letter} ({count}/{NUM_SAMPLES})", (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.imshow("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—è", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
print("‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.")
